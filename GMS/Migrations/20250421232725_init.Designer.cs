// <auto-generated />
using System;
using GMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421232725_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eCommerce.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 23, 27, 24, 954, DateTimeKind.Utc).AddTicks(742),
                            Description = "System administrator with full access.",
                            IsActive = true,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 23, 27, 24, 954, DateTimeKind.Utc).AddTicks(743),
                            Description = "Regular application user.",
                            IsActive = true,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 21, 23, 27, 24, 954, DateTimeKind.Utc).AddTicks(745),
                            Description = "Handles deliveries and transport.",
                            IsActive = true,
                            Name = "Driver"
                        });
                });

            modelBuilder.Entity("eCommerce.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 23, 27, 24, 954, DateTimeKind.Utc).AddTicks(416),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            PasswordHash = "hashed_password_1",
                            PasswordSalt = "salt_1",
                            PhoneNumber = "123-456-7890",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 23, 27, 24, 954, DateTimeKind.Utc).AddTicks(418),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Smith",
                            PasswordHash = "hashed_password_2",
                            PasswordSalt = "salt_2",
                            PhoneNumber = "987-654-3210",
                            Username = "janesmith"
                        });
                });

            modelBuilder.Entity("eCommerce.Services.Database.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAssigned = new DateTime(2025, 4, 21, 23, 27, 24, 954, DateTimeKind.Utc).AddTicks(981),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAssigned = new DateTime(2025, 4, 21, 23, 27, 24, 954, DateTimeKind.Utc).AddTicks(982),
                            RoleId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("GMS.Entities.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Škoda"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Renault"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Peugeot"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fiat"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Opel"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Seat"
                        });
                });

            modelBuilder.Entity("GMS.Entities.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Banja Luka"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bihać"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bijeljina"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bosnaska Krupa"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cazin"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Čapljina"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Drventa"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Doboj"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Goražde"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gračanica"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Gradačac"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Gradiška"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Konjic"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Laktaši"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Livno"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Lukavac"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Ljubuški"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Orašje"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Prijedor"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Prnjavor"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Srebrenik"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Stolac"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Široki Brijeg"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Travnik"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Visoko"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Zavidovići"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Zenica"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Zvornik"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Živinice"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Donji Vakuf"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Zavidovići"
                        });
                });

            modelBuilder.Entity("GMS.Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 23, 27, 24, 953, DateTimeKind.Utc).AddTicks(9784),
                            Description = "High-quality whey protein powder for muscle recovery and growth.",
                            IsActive = true,
                            Name = "Whey Protein",
                            Price = 49.99m,
                            SKU = "WHEY-001",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 23, 27, 24, 953, DateTimeKind.Utc).AddTicks(9786),
                            Description = "Pure creatine monohydrate to enhance strength and performance.",
                            IsActive = true,
                            Name = "Creatine Monohydrate",
                            Price = 29.99m,
                            SKU = "CREA-001",
                            StockQuantity = 150
                        });
                });

            modelBuilder.Entity("GMS.Entities.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PetFriendly")
                        .HasColumnType("bit");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTierId")
                        .HasColumnType("int");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleTierId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 2,
                            Color = "Black",
                            LicensePlate = "BL-123-XYZ",
                            Name = "BMW Series 3",
                            PetFriendly = true,
                            SeatsCount = 5,
                            StateMachine = "Accepted",
                            UserId = 1,
                            VehicleTierId = 2,
                            YearOfManufacture = 2018
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Color = "White",
                            LicensePlate = "SA-456-ABC",
                            Name = "Škoda Octavia",
                            PetFriendly = false,
                            SeatsCount = 5,
                            StateMachine = "Accepted",
                            UserId = 2,
                            VehicleTierId = 1,
                            YearOfManufacture = 2017
                        });
                });

            modelBuilder.Entity("GMS.Entities.Models.VehicleTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTiers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic vehicle tier for everyday rides.",
                            Name = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Comfortable rides with experienced drivers and newer vehicles.",
                            Name = "Premium"
                        },
                        new
                        {
                            Id = 3,
                            Description = "High-end vehicles offering top-tier comfort and amenities.",
                            Name = "Luxury"
                        });
                });

            modelBuilder.Entity("eCommerce.Services.Database.UserRole", b =>
                {
                    b.HasOne("eCommerce.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("eCommerce.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GMS.Entities.Models.Vehicle", b =>
                {
                    b.HasOne("GMS.Entities.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("eCommerce.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GMS.Entities.Models.VehicleTier", "VehicleTier")
                        .WithMany()
                        .HasForeignKey("VehicleTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("User");

                    b.Navigation("VehicleTier");
                });

            modelBuilder.Entity("eCommerce.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("eCommerce.Services.Database.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
